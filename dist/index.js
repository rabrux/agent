// Generated by CoffeeScript 1.12.2
(function() {
  var Agent, Behaviour, Task, core;

  Task = (function() {
    function Task(task) {
      this._id = String;
      this.type = String;
      this.cmd = String;
      this.args = {};
      this.startedAt = Number;
      this.path = String;
      this.ended = false;
      this.__token = String;
      this.__level = String;
      Object.assign(this, task);
    }

    Task.prototype.getId = function() {
      return this._id;
    };

    Task.prototype.getType = function() {
      return this.type;
    };

    Task.prototype.getCmd = function() {
      return this.cmd;
    };

    Task.prototype.getArgs = function() {
      return this.args;
    };

    Task.prototype.getToken = function() {
      return this.__token;
    };

    Task.prototype.getLevel = function() {
      return this.__level;
    };

    Task.prototype.setId = function(_id1) {
      this._id = _id1;
    };

    Task.prototype.setType = function(type1) {
      this.type = type1;
    };

    Task.prototype.setCmd = function(cmd) {
      this.cmd = cmd;
    };

    Task.prototype.setArgs = function(args) {
      this.args = args;
    };

    Task.prototype.setToken = function(__token) {
      this.__token = __token;
    };

    Task.prototype.setLevel = function(__level) {
      this.__level = __level;
    };

    return Task;

  })();

  Behaviour = (function() {
    function Behaviour(options) {
      this.agent = null;
      this.type = String;
      this.levels = [];
      Object.assign(this, options || {});
      this.setup();
    }

    Behaviour.prototype.setup = function() {};

    Behaviour.prototype.updateLevels = function(levels) {
      var a, b;
      if (levels == null) {
        levels = [];
      }
      a = this.levels;
      b = levels;
      return this.levels = a.concat(b.filter(function(item) {
        return a.indexOf(item) < 0;
      }));
    };

    Behaviour.prototype.action = function() {};

    Behaviour.prototype.verifyLevel = function(level) {
      level = level || '*';
      if (typeof level === 'function') {
        level = '*';
      }
      if (level !== '*' && this.levels.find(function(l) {
        return l === '*';
      })) {
        return true;
      }
      return this.levels.find(function(l) {
        return l === level;
      });
    };

    Behaviour.prototype.end = function(result) {
      this.getAgent().getSocket().emit('end', result);
      return this.getAgent().removeTask({
        _id: result != null ? result._id : void 0
      });
    };

    Behaviour.prototype.err = function(err) {
      this.getAgent().getSocket().emit('err', err);
      return this.getAgent().removeTask({
        _id: err != null ? err._id : void 0
      });
    };

    Behaviour.prototype.getType = function() {
      return this.type;
    };

    Behaviour.prototype.getAgent = function() {
      return this.agent;
    };

    Behaviour.prototype.getSocket = function() {
      return this.getAgent().getSocket();
    };

    Behaviour.prototype.setType = function(type1) {
      this.type = type1;
    };

    Behaviour.prototype.setAgent = function(agent) {
      this.agent = agent;
    };

    Behaviour.prototype.setLevels = function(levels1) {
      this.levels = levels1;
    };

    return Behaviour;

  })();

  Agent = (function() {
    function Agent(options) {
      this.type = String;
      this.behaviours = [];
      this.tasks = [];
      this.server = {
        remote: String,
        database: String,
        secret: String,
        locale: String,
        timezone: String
      };
      this.debug = false;
      this.socket = null;
      this.schemas = {};
      Object.assign(this, options || {});
      this.connect();
      this.setup();
    }

    Agent.prototype.setup = function() {};

    Agent.prototype.connect = function() {
      if (!this.getRemote()) {
        throw 'CONNECTION_ERROR';
      }
      this.socket = require('socket.io-client')(this.getRemote());
      return this.registerEvents();
    };

    Agent.prototype.registerEvents = function() {
      var it;
      it = this;
      this.socket.on('connect', function() {
        return it.log('connected to server');
      });
      this.socket.on('who', function() {
        it.log('sending handshake');
        return this.emit('handshake', {
          type: it.getType()
        });
      });
      this.socket.on('join', function(room) {
        return it.log("success join to " + room.name + ", " + room.length + " agents total");
      });
      this.socket.on('init', function(task) {
        var behaviour;
        it.log("init task " + task._id);
        task = new Task(task);
        behaviour = it.getTaskBehaviour(task);
        if (!behaviour) {
          return this.emit('err', {
            _id: task._id,
            code: 404,
            msg: 'COMMAND_NOT_FOUND'
          });
        }
        return it.addTask(task);
      });
      return this.socket.on('exec', function(_id) {
        it.log("exec task " + _id);
        return it.execTask(_id);
      });
    };

    Agent.prototype.execTask = function(_id) {
      var behaviour, task;
      task = this.findTask({
        _id: _id
      });
      if (!task) {
        throw 'TASK_NOT_FOUND_AT_EXEC';
      }
      behaviour = this.getTaskBehaviour(task);
      if (behaviour.verifyLevel(task.__level)) {
        return behaviour != null ? behaviour.action(task) : void 0;
      }
      return behaviour != null ? behaviour.err({
        _id: task._id,
        code: 401
      }) : void 0;
    };

    Agent.prototype.addBehaviour = function(behaviour) {
      return this.behaviours.push(behaviour);
    };

    Agent.prototype.findBehaviour = function(type) {
      return this.behaviours.find(function(behaviour) {
        return behaviour.type === type;
      });
    };

    Agent.prototype.getTaskBehaviour = function(task) {
      return this.findBehaviour(task.getCmd());
    };

    Agent.prototype.addTask = function(task) {
      this.tasks.push(task);
      return this.accept(task);
    };

    Agent.prototype.findTask = function(task) {
      return this.tasks.find(function(t) {
        return t._id === task._id;
      });
    };

    Agent.prototype.removeTask = function(task) {
      return this.tasks.splice(this.tasks.indexOf(this.findTask(task)), 1);
    };

    Agent.prototype.accept = function(task) {
      return this.getSocket().emit('accept', task);
    };

    Agent.prototype.getType = function() {
      return this.type;
    };

    Agent.prototype.getBehaviours = function() {
      return this.behaviours;
    };

    Agent.prototype.getTasks = function() {
      return this.tasks;
    };

    Agent.prototype.getServer = function() {
      return this.server;
    };

    Agent.prototype.getSocket = function() {
      return this.socket;
    };

    Agent.prototype.getSchemas = function() {
      return this.schemas;
    };

    Agent.prototype.isDebug = function() {
      return this.debug;
    };

    Agent.prototype.who = function() {
      return this.type;
    };

    Agent.prototype.setType = function(type1) {
      this.type = type1;
    };

    Agent.prototype.setBehaviours = function(behaviours) {
      this.behaviours = behaviours;
    };

    Agent.prototype.setServer = function(server) {
      this.server = server;
    };

    Agent.prototype.setSocket = function(socket) {
      this.socket = socket;
    };

    Agent.prototype.setSchemas = function(schemas) {
      this.schemas = schemas;
    };

    Agent.prototype.warn = function(msg) {
      if (this.debug) {
        console.error(msg);
      }
    };

    Agent.prototype.log = function(msg) {
      if (this.debug) {
        console.log(msg);
      }
    };

    return Agent;

  })();

  core = {
    Agent: Agent,
    Behaviour: Behaviour,
    Task: Task
  };

  module.exports = core;

}).call(this);
